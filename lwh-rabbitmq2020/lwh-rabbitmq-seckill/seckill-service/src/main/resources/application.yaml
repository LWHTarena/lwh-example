server:
  port: 8080

spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.56.15:3306/db_second_kill?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
#启动 SpringBoot 项目访问地址 http://localhost:8080/druid/login.html 进行登录，若出现一下界面则配置成功
    type: com.alibaba.druid.pool.DruidDataSource
      # 连接池配置
    druid:
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存时间
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM sys_user
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开 PSCache，并且指定每个连接上 PSCache 的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的 Filter，去掉后监控界面 SQL 无法统计，wall 用于防火墙
      filters: stat,wall,log4j
      # 通过 connection-properties 属性打开 mergeSql 功能；慢 SQL 记录
      connection-properties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      # 配置 DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: .js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
      # 配置 DruidStatViewServlet
      stat-view-servlet:
        url-pattern: /druid/*
        # IP 白名单，没有配置或者为空，则允许所有访问
        allow: 127.0.0.1
        # IP 黑名单，若白名单也存在，则优先使用
        deny: 192.168.31.253
        # 禁用 HTML 中 Reset All 按钮
        reset-enable: false
        # 登录用户名/密码
        login-username: root
        login-password: 123

  #  json序列化配置
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

# ===================================================================
# rabbitmq 的配置 与redis配置
# ===================================================================
  redis:
    host: 192.168.56.15
    port: 6379
    password: tarena
  rabbitmq:
    virtual-host: seckill
    host: 192.168.56.15
    port: 5672
    username: guest
    password: guest
    publisher-returns: true #发送回调
    publisher-confirm-type: simple #发送确认
    #消息确认机制 --- 是否开启手ack动确认模式   manual 开启
    listener:
      simple:
        concurrency: 5 #最小的消费者数量
        max-concurrency: 15 #最大的消费者数量
        prefetch: 10 # 指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量.
        acknowledge-mode: manual


  # ===================================================================
# 邮箱配置
# ===================================================================
  mail:
    host: smtp.qq.com
    username: 1974544863@qq.com
    password: cmtvsjvhonkjdaje
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
  send:
    from: 1974544863@qq.com

  kill:
    item:
      success:
        subject: 商品抢购成功
        content: "您好，您已成功抢购到商: <strong style=\"color: red\">%s</strong> ，复制该链接并在浏览器采用新的页面打开，即可查看抢购详情：${system.domain.url}/kill/record/detail/%s，并请您在1个小时内完成订单的支付，超时将失效该订单哦！祝你生活愉快！"

#mq.kill.item.success.kill.expire=10000 单位为ms
mq:
  kill:
    item:
      success:
        kill:
          expire: 1800000
zk:
  host: 192.168.56.15:2181
  namespace: kill

system:
  doamin:
    url: http://localhost:8080/kill
shiro:
  encrypt:
    password:
      salt: 11299c42bf954c0abb373efbae3f6b26

logging:
  level:
    com.fasterxml.jackson: info
    com.lwhtarena.server: debug
# ===================================================================
# 常量配置
# ===================================================================
seckill:
  #秒杀成功异步发送邮件的消息模型
  email-queue: kill.item.success.email.queue
  email-exchange: kill.item.success.email.exchange
  email-routing-key: kill.item.success.kill.dead.routing.key
  #订单超时未支付自动失效-死信队列消息模型
  kill:
    dead-queue: kill.item.success.kill.dead.queue
    dead-exchange: kill.item.success.kill.dead.exchange
    dead-routing-key: kill.item.success.kill.dead.routing.key
    dead-real-queue: kill.item.success.kill.dead.real.queue
    dead-prod-queue: kill.item.success.kill.dead.prod.exchange
    dead-prod-routing-key: kill.item.success.kill.dead.prod.routing.key
