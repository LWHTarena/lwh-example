package design_pattern.interpreter.scene01.advance;

import java.util.Stack;
/**
 通常 Client 是一个封装类，封装的结果就是传递进来一个规范语法文件，解析器分析后产生结果并返
 回，避免了调用者与语法解析器的耦合关系。
 */
public class Client {

	public static void main(String[] args) {
		Context ctx = new Context();
		//通常定一个语法容器，容纳一个具体的表达式，通常为ListArray,LinkedList,Stack等类型
		Stack<Expression> stack = null;
		for(;;){
			//进行语法判断，并产生递归调用
		}

		//产生一个完整的语法树，由各个具体的语法分析进行解析
//		Expression exp =stack.pop();
//		//具体元素进入场景
//		exp.interpreter(ctx);

	}

	/**解释器模式的应用
	 解释器模式的优点
	 解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改相应的非终结
	 符表达式就可以了，若扩展语法，则只要增加非终结符类就可以了。
	 解释器模式的缺点
	 首先，解释器模式会引起类膨胀。每个语法都要产生一个非终结符表达式，语法规则比较复杂时，就
	 可能产生大量的类文件，为维护带来了非常多的麻烦。
	 其次，解释器模式采用递归调用方法。每个非终结符表达式只关心与自己有关的表达式，每个表达式
	 需要知道最终的结果，必须一层一层的剥茧，无论是面向过程的语言还是面向对象的语言，递归都是在必
	 要条件下使用的，它导致调试非常复杂，想想看，如果我们要排查一个语法错误，我们是不是要一个一个
	 断点的调试下去直到最小的语法单元。
	 最后，效率问题，解释器模式由于使用了大量的循环和递归，效率是个不容忽视的问题，特别是用于
	 解析复杂、冗长的语法时，效率是难以忍受的。
	 */
	/*
	 * 尽量不要在项目中使用解释器模式
	 * 除非必要，那用什么来代替呢？可以使用 shell、JRuby、Groovy 等脚本语言来代替，完全可以满足
		一些商业的分析过程，我们在一个银行的分析型项目中就采用 JRuby 进行运算处理，代替了使用解释器模
		式的四则运算。
	 */

}
